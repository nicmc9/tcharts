{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/App.vue?edc9","webpack:///./src/components/ChartCanvas.vue?fcc6","webpack:///src/components/ChartCanvas.vue","webpack:///./src/components/ChartCanvas.vue?a272","webpack:///./src/components/ChartCanvas.vue","webpack:///src/App.vue","webpack:///./src/App.vue?a7d1","webpack:///./src/App.vue","webpack:///./src/main.js","webpack:///./src/components/ChartCanvas.vue?ca96","webpack:///./src/App.vue?d309"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","app","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","Appvue_type_template_id_9a054fec_scoped_true_render","_vm","this","_h","$createElement","_c","_self","attrs","id","staticClass","on","click","$event","isNight","_v","_l","chart","index","_s","hWindow","wWindow","staticRenderFns","ChartCanvasvue_type_template_id_188ad938_scoped_true_render","style","width","prevWidth","height","mainCanvasHeight","ref","mouseenter","mainEnter","mousemove","mainMove","mouseleave","mainUp","prevCanvasHeight","mousedown","previewDown","previewMove","mouseup","previewUp","val","type","domProps","change","updateGraph","border-color","colors","color","href","file","download","save","ChartCanvasvue_type_template_id_188ad938_scoped_true_staticRenderFns","ChartCanvasvue_type_script_lang_js_","props","ctxPreview","ctxMain","ctxBoard","names","types","columns","previewCoord","maxValue","countLine","boxXcoord","boxWidth","activGraph","xOffset","selectedBox","selectedLeftSide","selectedRightSide","timeId","mouseX","mainData","currentData","step","ratioMain","timeColor","$options","dayColor","datesArr","fillPreview","box","metrics","gLine","textInfo","board","nightColor","watch","document","body","backgroundColor","draw","defaultDraw","computed","w","Math","round","mainHeight","h","prevHeight","prevShift","mainShift","boxStop","xStep","start","end","metricValue","ceil","shiftY","updated","init","console","log","methods","canvasMain","$refs","main","toDataURL","indexOf","sort","setPreviewCoord","isIntoSlider","isIntoLeftSide","isIntoRightSide","e","self","pageX","setInterval","clearInterval","saveboxXcoord","newWidth","_mouseX","xRight","delta","_newWidth","_mouseX2","requestAnimationFrame","drawInfoBoard","cancelAnimationFrame","clearRect","mouse","prev","center","setCurrentData","options","month","day","weekday","date","Date","toLocaleString","ctx","fillStyle","font","strokeStyle","drawVerticalLine","shadowBlur","shadowColor","widthBoard","hei","space","yS","textWidthArr","measureText","updateWidthBoard","xBoard","drawBoard","x","y","radius","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","fill","drawArcs","arc","PI","stroke","temp","len","drawDates","fillText","drawCurrentData","drawNames","restore","lineWidth","getCoords","elem","getBoundingClientRect","top","pageYOffset","left","pageXOffset","setCurrentMainData","tempArray","yArray","getPreviewRatio","maxArray","max","ratioPreview","setMainRatio","drawGraph","yCoord","drawBox","rightSideBox","widthLine","drawFillBox","fillRect","drawMetrics","drawDate","drawYmeter","setDateArray","time","actualDate","check","drawText","_i","drawPreviewGraphs","drawMainGraphs","_i2","canvasPreview","preview","getContext","canvasBoard","chiftM","chiftP","translate","keys_default","coords","created","mounted","components_ChartCanvasvue_type_script_lang_js_","component","componentNormalizer","ChartCanvas","Appvue_type_script_lang_js_","charts","onResize","documentElement","clientHeight","clientWidth","loadJSON","callback","xobj","XMLHttpRequest","overrideMimeType","open","onreadystatechange","readyState","status","responseText","send","addEventListener","response","JSON","parse","beforeDestroy","removeEventListener","components","src_Appvue_type_script_lang_js_","App_component","App","Vue","config","productionTip","render","$mount","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_6_oneOf_1_0_node_modules_css_loader_index_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ChartCanvas_vue_vue_type_style_index_0_id_188ad938_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_6_oneOf_1_0_node_modules_css_loader_index_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ChartCanvas_vue_vue_type_style_index_0_id_188ad938_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_6_oneOf_1_0_node_modules_css_loader_index_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_id_9a054fec_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_6_oneOf_1_0_node_modules_css_loader_index_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_id_9a054fec_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default"],"mappings":"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","file":"js/app.2a90b5ec.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"app\"}},[_c('div',{staticClass:\"night-mode\"},[(_vm.isNight)?_c('p',{on:{\"click\":function($event){_vm.isNight=!_vm.isNight}}},[_vm._v(\"Switch to Day Mode \")]):_c('p',{on:{\"click\":function($event){_vm.isNight=!_vm.isNight}}},[_vm._v(\"Switch to Night Mode \")])]),_c('ul',{staticClass:\"select-chart\"},_vm._l((_vm.charts),function(chart,index){return _c('li',{key:index},[_c('p',{staticClass:\"number\"},[_vm._v(\"Chart№\"+_vm._s(index+1))]),_c('chart-canvas',{attrs:{\"chart\":chart,\"isNight\":_vm.isNight,\"hWindow\":_vm.hWindow,\"wWindow\":_vm.wWindow}})],1)}),0)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:\"stage\",style:({width:_vm.prevWidth+'px',height:_vm.mainCanvasHeight+'px'})},[_c('canvas',{ref:\"board\",attrs:{\"width\":_vm.prevWidth,\"height\":_vm.mainCanvasHeight},on:{\"mouseenter\":_vm.mainEnter,\"mousemove\":_vm.mainMove,\"mouseleave\":_vm.mainUp}}),_c('canvas',{ref:\"main\",attrs:{\"width\":_vm.prevWidth,\"height\":_vm.mainCanvasHeight}})]),_c('canvas',{ref:\"preview\",attrs:{\"width\":_vm.prevWidth,\"height\":_vm.prevCanvasHeight},on:{\"mousedown\":_vm.previewDown,\"mousemove\":_vm.previewMove,\"mouseup\":_vm.previewUp,\"mouseleave\":_vm.previewUp}}),_c('br'),_c('ul',{staticClass:\"checkbox\"},_vm._l((_vm.names),function(val,key){return _c('li',{staticClass:\"checkbox__li\"},[_c('label',[_c('input',{staticClass:\"checkbox__input\",attrs:{\"type\":\"checkbox\"},domProps:{\"value\":key},on:{\"change\":function($event){return _vm.updateGraph(key)}}}),_c('span',{staticClass:\"checkbox__button\",style:({'border-color': _vm.colors[key] })}),_c('i',{staticClass:\"checkbox__i\"},[_vm._v(\"✔\")]),_c('span',{staticClass:\"checkbox__text\",style:(_vm.isNight?{color: 'white','border-color':'#40566b'}:'')},[_vm._v(_vm._s(val))])]),_c('br')])}),0),_c('br'),_c('a',{staticClass:\"save\",attrs:{\"href\":_vm.file,\"download\":\"chart\"},on:{\"click\":_vm.save}},[_vm._v(\"Save chart\")])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n\r\n    <div>\r\n\r\n        <div class=\"stage\"  :style=\"{width:prevWidth+'px',height:mainCanvasHeight+'px'}\">\r\n\r\n            <canvas ref=\"board\" :width = \"prevWidth\" :height=\"mainCanvasHeight\"\r\n\r\n                    @mouseenter=\"mainEnter\"\r\n                    @mousemove=\"mainMove\"\r\n                    @mouseleave=\"mainUp\"\r\n\r\n            ></canvas>\r\n\r\n            <canvas ref=\"main\" :width = \"prevWidth\" :height=\"mainCanvasHeight\"\r\n\r\n            ></canvas>\r\n\r\n\r\n\r\n        </div>\r\n\r\n\r\n        <canvas ref=\"preview\" :width = \"prevWidth\" :height=\"prevCanvasHeight\"\r\n                @mousedown=\"previewDown\"\r\n                @mousemove=\"previewMove\"\r\n                @mouseup=\"previewUp\"\r\n                @mouseleave=\"previewUp\"\r\n        ></canvas>\r\n        <br>\r\n\r\n\r\n        <ul class=\"checkbox\">\r\n            <li class=\"checkbox__li\" v-for =\"(val,key) in names\">\r\n\r\n                <label >\r\n                    <input class=\"checkbox__input\" type=\"checkbox\"  :value=\"key\" @change=\"updateGraph(key)\">\r\n                    <span class=\"checkbox__button\" :style=\"{'border-color': colors[key] }\"></span>\r\n                    <i class=\"checkbox__i\" >&#10004;</i>\r\n                    <span class=\"checkbox__text\"\r\n                          :style=\"isNight?{color: 'white','border-color':'#40566b'}:''\">{{val}}</span></label>\r\n\r\n                <br>\r\n            </li>\r\n        </ul>\r\n        <br>\r\n\r\n        <a  :href=\"file\" class=\"save\"  download=\"chart\" @click=\"save\">Save chart</a>\r\n\r\n\r\n\r\n    </div>\r\n\r\n\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        props: ['chart','isNight','hWindow','wWindow'],\r\n        data: function () {\r\n            return {\r\n                ctxPreview: 0, // Контекст предпросмотра\r\n                ctxMain: 0,    //  Главный график\r\n                ctxBoard: 0,     //Информатор\r\n                //Данные json\r\n                colors:{},   //Хранит цвета в виде {y0:#fff}\r\n                names: {},   //Хранит имена в виде {y0:#0}\r\n                types:{},    //Хранит типы в виде {y0:'line'}\r\n                columns: {}, //Хранит хначения в виде  { \"columns\": [   ['x','1099090'],['y0','32'],['y1','342'] ] }\r\n              // Хранение координат предпросмотра для переиспользования\r\n                previewCoord: [],    //   [ [122, 'y0'] ,[123,'y1']]\r\n                // максимальное значение данных в columns для y координат\r\n                maxValue: 1,\r\n                countLine: 5,  // соличество линий на главной\r\n                boxXcoord: 0,  // начальная координата х коробки\r\n                boxWidth: 280,    //начальная ширина коробки\r\n                //превратить в актив\r\n                activGraph: [],   // массив содержащий неактивные графики в виде ['y0','y1']\r\n                xOffset: 0,   // смешение от края экрана можно удалить и использовать layerX вместо pageX в будущем\r\n                selectedBox: false, // флаг выбора самой коробки\r\n                selectedLeftSide: false, // флаг выбора левого столбца коробки\r\n                selectedRightSide: false, // флаг выбора правого столбца коробки\r\n                timeId: 0,  // таймер для сброса анимации\r\n                mouseX:0,   // текущее положение мышки\r\n                mainData:[],  // массив значений из columns находящейся между start and end т.е. данные непосредственно сейчас отображаемые\r\n                currentData:[],  // данные из columns на которых сейчас инфоДоска\r\n                step:0,  // шаг для координаты х на главном холсте\r\n                ratioMain: 1,   // отношение к системе координат холста и значений данных из colimns\r\n                // набор цветов по умолчанию дневного режима можно переопределить на все графики\r\n                timeColor: this.$options.dayColor,\r\n                datesArr:[],\r\n                file:''\r\n            }\r\n        },\r\n\r\n        dayColor:{\r\n            fillPreview:\"rgba(245,249,251,0.5)\",\r\n            box:\"rgba(221,234,243,0.5)\",\r\n            metrics:\"rgba(139,147,153)\",\r\n            gLine:\"rgba(221,234,243,0.5)\",\r\n            textInfo: \"#000\",\r\n            board: \"#fff\",\r\n        },\r\n\r\n        nightColor:{\r\n            fillPreview:\"rgba(31,42,56,0.5)\",\r\n            box:\"rgba(95,128,158,0.5)\",\r\n            metrics:\"rgba(95,128,158)\",\r\n            gLine:\"rgba(64,86,107,0.5)\",\r\n            textInfo: \"#fff\",\r\n            board: \"#2b384a\",\r\n        },\r\n\r\n        watch: {\r\n             isNight:function () {\r\n                if(this.isNight){\r\n                    this.timeColor = this.$options.nightColor;\r\n                    document.body.style.backgroundColor = \"#293647\";\r\n                }else{\r\n                    document.body.style.backgroundColor = \"white\";\r\n                    this.timeColor = this.$options.dayColor;\r\n                }\r\n\r\n                if(this.activGraph.length)  {\r\n                    this.draw();\r\n                }else{\r\n                    this.defaultDraw();\r\n                }\r\n\r\n            }\r\n\r\n        },\r\n        computed: {\r\n            prevWidth: function (){\r\n            let w= Math.round(this.wWindow*0.8);\r\n               if(w<600) w =600;\r\n               return w;\r\n            },\r\n            mainHeight: function (){\r\n             let h =   Math.round(this.hWindow*0.6);\r\n             if(h<400) h=400;\r\n             return h;\r\n            },\r\n            prevHeight: function (){\r\n              return  Math.round(this.mainHeight*0.15);\r\n            },\r\n            prevShift:function(){\r\n              return   this.prevHeight/10;\r\n            },\r\n            mainShift:function(){\r\n                return   this.mainHeight/10;\r\n            },\r\n            mainCanvasHeight: function (){\r\n                 return this.mainHeight + this.mainShift;\r\n            },\r\n            prevCanvasHeight: function (){\r\n                return this.prevHeight + this.prevShift;\r\n            },\r\n\r\n            boxStop:function (){\r\n                 return this.prevWidth*0.2;\r\n            },\r\n            // геттер вычисляемого значения\r\n            xStep: function () {\r\n                return  this.prevWidth/(this.columns[0].length - 1);\r\n            },\r\n            // Сдвигаем на 1 чтобы в результирующих массивах всегда пропускался первый индекс\r\n            // в котором информация\r\n            start: function () {\r\n                return  this.boxXcoord/this.xStep +1;\r\n\r\n            },\r\n\r\n            end: function () {\r\n                return this.start + this.boxWidth/this.xStep;\r\n            },\r\n\r\n            // Высляються цифры в левой шкале\r\n            metricValue: function () {\r\n                let val = this.maxValue/this.countLine-1;  //this.countLine-1\r\n                return Math.ceil(val);\r\n            },\r\n            shiftY: function () {\r\n                return  this.mainHeight/this.countLine;\r\n            },\r\n\r\n\r\n        },\r\n        updated(){\r\n\r\n          this.init();\r\n            console.log(\"Ну обновился я\");\r\n        },\r\n\r\n        methods: {\r\n\r\n            ///////////////  Active Graphics/////////////////\r\n            save(){\r\n                let canvasMain = this.$refs.main;\r\n                this.file = canvasMain.toDataURL('image/png');\r\n            },\r\n\r\n            updateGraph(key){\r\n                console.log('key',key);\r\n                let index =  this.activGraph.indexOf(key);\r\n                if(index === -1){\r\n                    this.activGraph.push(key);\r\n                    this.activGraph.sort();\r\n\r\n                }else{\r\n                    this.activGraph.splice(index,1);\r\n                }\r\n                if(this.activGraph.length){\r\n                    this.setPreviewCoord();\r\n                    this.draw();\r\n\r\n                }else{\r\n                    this.defaultDraw();\r\n                }\r\n\r\n\r\n                // console.log(' this.activGraph', this.activGraph);\r\n            },\r\n\r\n\r\n            ///////////////////////Night - Day///////////////////////////////\r\n\r\n\r\n            /// методы событий изменяющие данные\r\n\r\n            isIntoSlider(mouseX){\r\n                return mouseX>this.boxXcoord&&mouseX<this.boxXcoord+this.boxWidth;\r\n            },\r\n            isIntoLeftSide(mouseX){\r\n                // console.log('this.mouse.x',this.mouse.x);\r\n                return mouseX>=this.boxXcoord&&mouseX<=(this.boxXcoord+15);  // зависит от параметра в функции drawLine let widthLine = 15;\r\n            },\r\n\r\n            isIntoRightSide(mouseX){\r\n\r\n                return mouseX>=(this.boxXcoord + this.boxWidth-15)&&mouseX<=(this.boxXcoord + this.boxWidth);  // зависит от параметра в функции drawLine let widthLine = 15;\r\n            },\r\n\r\n            /////////////////////////  Compute Box Data /////////////////////////////////////////\r\n            previewDown(e){\r\n\r\n                if(!this.activGraph.length) return;\r\n\r\n                let self = this;\r\n                let mouseX = e.pageX-this.xOffset;\r\n\r\n                //  console.log('this.mouseX',this.mouseX);\r\n                if(this.isIntoLeftSide(mouseX)){\r\n                    this.selectedLeftSide = true;\r\n                    //  console.log('Попал в левую рамку');\r\n\r\n                    self.timeId =  setInterval(function() {\r\n                        self.draw();\r\n                    }, 50);\r\n\r\n                }else if(this.isIntoRightSide(mouseX)){\r\n\r\n                    this.selectedRightSide = true;\r\n                    //   console.log('Попал в правую рамку');s\r\n\r\n                    self.timeId =  setInterval(function() {\r\n                        self.draw();\r\n                    }, 50);\r\n\r\n                }else if(this.isIntoSlider(mouseX)){\r\n                    this.selectedBox = true;\r\n\r\n                    self.timeId =  setInterval(function() {\r\n                        self.draw();\r\n                    }, 50);\r\n\r\n                }\r\n\r\n            },\r\n            previewUp(){\r\n                if(!this.activGraph.length) return;\r\n\r\n                this.selectedBox = false;\r\n                this.selectedLeftSide = false;\r\n                this.selectedRightSide = false;\r\n\r\n                clearInterval(this.timeId);\r\n\r\n            },\r\n\r\n            previewMove(e){\r\n\r\n                if(!this.activGraph.length) return;\r\n\r\n              //   let initBox = this.prevWidth*0.3;\r\n                if(this.selectedLeftSide){\r\n                    //Нужно изменить параметры которые влияют на рисование коробки\r\n                    // коробка будет отрисовываться сама благодорая интервалам\r\n                    let mouseX = e.pageX-this.xOffset;\r\n                    // высталсяем мыш на начало элемента\r\n\r\n                    // сохраним левую х координату\r\n                    let saveboxXcoord = this.boxXcoord;\r\n                    //елси пользователь двигает мышь влево то новое значение координат будет уменьшаться\r\n                    // если в право то увеличиваться\r\n                    //новое значение измениться на небольшую величину\r\n                    this.boxXcoord = mouseX;\r\n                    // берем старую шинину\r\n                    let newWidth = this.boxWidth;\r\n                    // разница будет положительно если мыш пошла в лево\r\n                    // и на эту небольшую величину изменяем ширину коробки\r\n                    newWidth +=saveboxXcoord - this.boxXcoord;\r\n\r\n                    // если мы шли в право и уменьшили ширину до 300\r\n                    // тогда останавливаем продвижение и все\r\n                    // при этом не трогаем ширину если ее поменять будет немного дергаться\r\n                    if( newWidth <= this.boxStop){\r\n                        this.boxXcoord = saveboxXcoord;\r\n\r\n                    }else{\r\n                        this.boxWidth = newWidth;\r\n\r\n                    }\r\n\r\n                    // console.log('this.boxXcoord',this.boxXcoord );\r\n                    // console.log('this.boxWidth',this.boxWidth );\r\n\r\n\r\n\r\n                }else if(this.selectedRightSide){\r\n                    let mouseX = e.pageX-this.xOffset;\r\n                    // получаем координату х на границе правой стороны\r\n                    let xRight = this.boxXcoord + this.boxWidth;\r\n\r\n                    // Вычисляем разницу если мышь идет в право\r\n                    // значение положительно и нужно увеличивать коробку\r\n                    let delta  = mouseX - xRight;\r\n\r\n                    //Увеличиваем коробку или уменьшаем если delta в минусе\r\n                    let newWidth = this.boxWidth + delta;\r\n\r\n                    // проверка границ сначала на размер коробки затем\r\n                    // на выход из холста если все нормально изменяем ширину на новую\r\n                    if(newWidth <= this.boxStop){\r\n                        return;\r\n                    }\r\n                    else if( this.boxXcoord + newWidth >= this.prevWidth){\r\n                        return;\r\n                    }else{\r\n                        this.boxWidth = newWidth;\r\n\r\n                    }\r\n\r\n                    // console.log('this.boxXcoord',this.boxXcoord );\r\n                    // console.log('this.boxWidth',this.boxWidth );\r\n\r\n                }else  if(this.selectedBox){\r\n                    let mouseX = e.pageX-this.xOffset;\r\n\r\n                    this.boxXcoord = mouseX - this.boxWidth/ 2;\r\n\r\n                    //Ограничем левый и правый край\r\n                    if(this.boxXcoord < 0) {\r\n                        this.boxXcoord = 0;\r\n                    }else if(this.boxXcoord >=this.prevWidth-this.boxWidth){\r\n                        this.boxXcoord = this.prevWidth-this.boxWidth;\r\n                    }\r\n\r\n                    // console.log('this.boxXcoord',this.boxXcoord );\r\n                }\r\n\r\n            },\r\n/////////////////////////  infoBoard /////////////////////////////////////////\r\n            mainEnter(){\r\n                console.log('я вошел');\r\n                if(!this.activGraph.length) return;\r\n                this.timeId = requestAnimationFrame(this.drawInfoBoard);\r\n            },\r\n            mainUp(e){\r\n                console.log('я вышел');\r\n                if(!this.activGraph.length) return;\r\n                cancelAnimationFrame(this.timeId);\r\n                // Стираем информатор\r\n                this.ctxBoard.clearRect(0, -this.mainHeight-50, this.prevWidth, this.mainHeight+100);\r\n            },\r\n\r\n            mainMove(e){\r\n\r\n\r\n                if(!this.activGraph.length) return;\r\n\r\n                let self = this;\r\n\r\n                let mouse = e.pageX-self.xOffset;\r\n\r\n                for ( let i =0,j =0; i< self.prevWidth; i+=self.step,j++){\r\n                    let prev = i-self.step;\r\n                    let center = i-this.step/2;\r\n                    if( mouse < i && mouse >= center ){\r\n                        setCurrentData(j,i);\r\n                        break;\r\n                    }else if(mouse< center&&mouse >= prev ){\r\n                        setCurrentData(j-1,prev);  //откатывае данные на один шаг назад\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                function  setCurrentData(j,i) {\r\n                    self.mouseX = i;\r\n                    let  options = {\r\n                        month: 'short',\r\n                        day: 'numeric',\r\n                        weekday: 'short',\r\n                    };\r\n\r\n                    let date = new Date(self.mainData[0][j]).toLocaleString(\"en-US\",options);\r\n                    self.currentData =[];\r\n                    self.currentData.push(date);\r\n                    for(let m = 1; m <self.mainData.length; m++){\r\n                        self.currentData.push( self.mainData[m][j]);\r\n                    }\r\n                }\r\n\r\n            },\r\n\r\n\r\n\r\n\r\n            drawInfoBoard(){\r\n\r\n            //    console.log('я рисую доску');\r\n                let ctx = this.ctxBoard;\r\n                let self = this;\r\n                ctx.clearRect(0, -this.mainHeight-50, this.prevWidth, this.mainHeight+100);\r\n\r\n                //Для доски и кружочков\r\n                ctx.fillStyle =this.timeColor.board;\r\n                // Используеться для вычислений и для установки размеров текущихданных///\r\n                ctx.font=\"bold 25px sans-serif\";\r\n                ctx.save();\r\n                ctx.strokeStyle=this.timeColor.box;                     ///\r\n                drawVerticalLine();\r\n\r\n                ctx.shadowBlur = 2;                             ///\r\n                ctx.shadowColor = \"rgba(0, 0, 0, 0.3)\";         ///\r\n\r\n                let widthBoard = this.prevWidth/7;          // Начальная ширина доски 135\r\n                let hei = this.mainHeight/6;                 //Высота доски  100\r\n                const space = 20;\r\n\r\n                // значение отступа сверху подобрал эксперементально где-то 25 -30 нормально\r\n                // и перевел в динамику\r\n                const yS = hei/3.5;\r\n\r\n                //расстояние между словами\r\n                let name='';\r\n                let textWidthArr=[];\r\n                // первое значение дату пропускаем\r\n                //Сначала измеряем текст\r\n                measureText();\r\n                // потом обновляем ширину\r\n                updateWidthBoard();\r\n                let xBoard = self.mouseX - widthBoard/2;  // устанавлием координату X доски\r\n                if(xBoard <=0){\r\n                    xBoard =2;\r\n                }else  if(xBoard+widthBoard >self.prevWidth){\r\n                    xBoard = self.prevWidth -widthBoard-2;\r\n                }\r\n\r\n                drawArcs();\r\n                drawBoard(xBoard, -self.mainHeight, widthBoard, hei,10);\r\n                //   drawBoard();\r\n                ctx.restore();\r\n\r\n                ctx.lineWidth =2;\r\n\r\n\r\n                drawCurrentData();\r\n\r\n                ctx.fillStyle =self.timeColor.textInfo;\r\n                ctx.font=\"20px sans-serif\";\r\n                drawDates();\r\n\r\n                ctx.font=\" 16px sans-serif\";\r\n                drawNames();\r\n\r\n                function drawBoard(x, y, width, height, radius) {\r\n                    ctx.beginPath();\r\n                    ctx.moveTo(x + radius, y);\r\n                    ctx.lineTo(x + width - radius, y);\r\n                    ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n                    ctx.lineTo(x + width, y + height - radius);\r\n                    ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n                    ctx.lineTo(x + radius, y + height);\r\n                    ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n                    ctx.lineTo(x, y + radius);\r\n                    ctx.quadraticCurveTo(x, y, x + radius, y);\r\n                    ctx.closePath();\r\n                    ctx.fill();\r\n                }\r\n\r\n\r\n                function drawArcs() {\r\n\r\n                    for(let i = 1; i < self.currentData.length; i++){\r\n\r\n                        ctx.strokeStyle = self.colors[self.activGraph[i-1]];\r\n\r\n                        let y = -self.currentData[i]/self.ratioMain;\r\n\r\n                        ctx.beginPath();\r\n                        ctx.arc(self.mouseX,y,5,0,Math.PI*2,true);\r\n                        ctx.fill();\r\n\r\n                        ctx.beginPath();\r\n                        ctx.arc(self.mouseX,y,5,0,Math.PI*2,true);\r\n                        ctx.stroke();\r\n                    }\r\n                }\r\n\r\n                function measureText() {\r\n                    for(let i = 1; i < self.currentData.length; i++){\r\n                        let temp = ctx.measureText(self.currentData[i]);\r\n                        textWidthArr.push(temp.width);\r\n                    }\r\n                }\r\n\r\n                function updateWidthBoard() {\r\n                    let len = space;\r\n                    for(let i = 0; i < textWidthArr.length; i++){\r\n                        len += textWidthArr[i] + space;\r\n                    }\r\n                    if(len > widthBoard){\r\n                        widthBoard = len;\r\n                    }\r\n                }\r\n\r\n                function drawDates() {\r\n                    ctx.fillText(self.currentData[0], xBoard + space, -self.mainHeight + yS );\r\n                }\r\n\r\n                function drawCurrentData() {\r\n                    let w=0;\r\n                    for(let i = 1,j = space; i < self.currentData.length; i++,j += space){\r\n                        ctx.fillStyle = self.colors[self.activGraph[i-1]];                           ////\r\n\r\n                        if(i === 1) {\r\n                            ctx.fillText(self.currentData[i], xBoard + j, -self.mainHeight + (yS*2));\r\n                        }else{\r\n                            w += textWidthArr[i-2];\r\n                            ctx.fillText(self.currentData[i], xBoard + j + w, -self.mainHeight + (yS*2));\r\n                        }\r\n                    }\r\n                }\r\n\r\n                function drawNames() {\r\n\r\n                    let w=0;\r\n                    for(let i = 1,j = space; i < self.currentData.length; i++,j += space){\r\n                        ctx.fillStyle = self.colors[self.activGraph[i-1]];\r\n                        name = self.names[self.activGraph[i-1]];\r\n                        if(i === 1) {\r\n                            ctx.fillText(name, xBoard + j, -self.mainHeight + (yS*3));\r\n                        }else{\r\n                            w += textWidthArr[i-2];\r\n                            ctx.fillText(name, xBoard + j + w, -self.mainHeight + (yS*3));\r\n                        }\r\n                    }\r\n                }\r\n\r\n                function drawVerticalLine() {\r\n                    ctx.beginPath();\r\n                    ctx.moveTo(self.mouseX,0);\r\n                    ctx.lineTo(self.mouseX,-self.mainHeight);\r\n                    ctx.stroke();\r\n                }\r\n\r\n                this.timeId = requestAnimationFrame(this.drawInfoBoard);\r\n            },\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            ///////////////////////////////////////////\r\n\r\n\r\n            getCoords(elem) {\r\n                let box = elem.getBoundingClientRect();\r\n                return {\r\n                    top: box.top + pageYOffset,\r\n                    left: box.left + pageXOffset\r\n                };\r\n            },\r\n\r\n/////////////////////////  draw() /////////////////////////////////////////\r\n\r\n\r\n            setCurrentMainData(){\r\n\r\n                let tempArray =[];\r\n                this.mainData=[];\r\n\r\n                let yArray  = this.columns[0];\r\n                tempArray = yArray.slice(this.start,this.end);\r\n                this.mainData.push(tempArray);\r\n\r\n                //В цикле только данные по Y\r\n                for(let i = 1; i < this.columns.length;i++ ) {\r\n                    yArray  = this.columns[i];\r\n                    if(this.activGraph.indexOf(yArray[0]) === -1){\r\n                        continue;\r\n                    }\r\n                    tempArray = yArray.slice(this.start,this.end);\r\n                    this.mainData.push(tempArray);\r\n                }\r\n                this.step =    this.prevWidth/tempArray.length;\r\n\r\n            },\r\n\r\n            getPreviewRatio(){\r\n                let maxArray = [];\r\n                //Пропускаем первый элемент массива содержащий даты\r\n                for(let i = 1; i < this.columns.length;i++ ){\r\n                    let y  = this.columns[i];\r\n                    if(this.activGraph.indexOf(y[0])=== -1){\r\n                        continue;\r\n                    }\r\n                    let temp = y[0];\r\n                    y[0]=0;  //MAth.max работает только с цифрами\r\n                    maxArray.push(Math.max.apply(null,y));\r\n                    y[0]=temp;\r\n                }\r\n                let maxValue = Math.max.apply(null,maxArray);\r\n\r\n                let ratioPreview = maxValue/this.prevHeight;\r\n                ratioPreview =   Math.round(ratioPreview * 100) / 100;  //округляем до 0,00\r\n\r\n                return ratioPreview;\r\n                // console.log(\"maxValue\",maxValue);\r\n                // console.log(\"ratioPreview\",this.ratioPreview);\r\n\r\n            },\r\n            setMainRatio(){\r\n                let maxArray = [];\r\n\r\n                for(let i = 1; i < this.mainData.length;i++ ){\r\n                    let y  = this.mainData[i];\r\n                    maxArray.push(Math.max.apply(null,y));\r\n                }\r\n\r\n                this.maxValue = Math.max.apply(null,maxArray);\r\n\r\n                this.ratioMain =  this.maxValue/this.mainHeight;\r\n                this.ratioMain =   Math.round(this.ratioMain * 100) / 100;\r\n\r\n                //    console.log(\"ratioMain\",this.ratioMain);\r\n            },\r\n\r\n            drawGraph(yCoord ,ctx,color,step){\r\n              //  console.log('я рисую график');\r\n                let x = 0;\r\n                ctx.strokeStyle = color;\r\n                ctx.beginPath();\r\n                ctx.moveTo(x,yCoord[0]);\r\n                for(let i=1; i < yCoord.length; i++){\r\n                    x += step;\r\n                    ctx.lineTo( x,yCoord[i]);\r\n\r\n                }\r\n                ctx.stroke();\r\n            },\r\n\r\n            drawBox(ctx){\r\n           //     console.log('я рисую коробку');\r\n\r\n                ctx.strokeStyle=this.timeColor.box;\r\n                //Координата правой часта коробки\r\n                let rightSideBox = this.boxXcoord + this.boxWidth;\r\n\r\n                // Затем главный бокс\r\n                let d = this.prevShift/2; // Раньше было 5\r\n\r\n\r\n                let widthLine = 15;\r\n                let r =widthLine/2;  //r нам нужен чтобы рамка рисовалась внутри холста без него она выходит за холст на половину\r\n                ctx.lineWidth =widthLine;\r\n\r\n                ctx.beginPath();\r\n                ctx.moveTo(this.boxXcoord+r,-this.prevHeight-d);\r\n                ctx.lineTo(this.boxXcoord+r,d);\r\n                ctx.moveTo(rightSideBox-r,-this.prevHeight-d);\r\n                ctx.lineTo(rightSideBox-r,d);\r\n                ctx.stroke();\r\n\r\n                ctx.lineWidth =4;\r\n                ctx.beginPath();\r\n                ctx.moveTo(this.boxXcoord,-this.prevHeight-d);\r\n                ctx.lineTo(rightSideBox,-this.prevHeight-d);\r\n                ctx.moveTo(rightSideBox,d);\r\n                ctx.lineTo(this.boxXcoord,d);\r\n                ctx.stroke();\r\n\r\n            },\r\n            drawFillBox(ctx){\r\n\r\n                let d = this.prevShift/2;\r\n\r\n                ctx.fillStyle = this.timeColor.fillPreview;\r\n                let rightSideBox = this.boxXcoord + this.boxWidth;\r\n                ctx.fillRect(0,-this.prevHeight-d,this.boxXcoord, this.prevCanvasHeight);\r\n                ctx.fillRect(rightSideBox,-this.prevHeight-d,this.prevWidth-rightSideBox, this.prevCanvasHeight);\r\n            },\r\n\r\n            drawMetrics(ctx){\r\n\r\n                //Шрифт и цвет для обоих метрик\r\n\r\n                ctx.fillStyle = this.timeColor.metrics;\r\n                ctx.strokeStyle = this.timeColor.gLine;\r\n                ctx.font = \"16px sans-serif\";\r\n\r\n                this.drawDate(ctx);\r\n                this.drawYmeter(ctx);\r\n            },\r\n\r\n            setDateArray(){\r\n\r\n                let  options = {\r\n                    month: 'short',\r\n                    day: 'numeric',\r\n                };\r\n                let time = this.columns[0];\r\n                this.datesArr=[];\r\n\r\n\r\n                for (let i = 0; i < time.length; i++) {\r\n                    if(i%6===0) {\r\n                        this.datesArr.push(new Date(time[i]).toLocaleString(\"en-US\", options));\r\n                    }else{\r\n                        this.datesArr.push(\"\");\r\n                    }\r\n                }\r\n                this.datesArr[1] = new Date(time[1]).toLocaleString(\"en-US\", options);\r\n                this.datesArr[this.datesArr.length-1] =  (new Date(time[time.length-1]).toLocaleString(\"en-US\", options));\r\n                //    console.log('this.datesArr0',this.datesArr);\r\n            },\r\n\r\n\r\n            drawDate(ctx){\r\n\r\n                let date = this.datesArr.slice(this.start,this.end);\r\n                let step = this.step;\r\n\r\n                let  actualDate=[];\r\n                console.log('e',this.e);\r\n                console.log('date',date);\r\n\r\n                for(let i = 0;i < date.length; i++)\r\n                {\r\n                    if(date[i]) {   actualDate.push(date[i]);\r\n                    }\r\n                }\r\n\r\n                if(actualDate.length > 6){\r\n                    check();\r\n\r\n                    drawText();\r\n                }else{\r\n                    drawText();\r\n                }\r\n\r\n\r\n                function check() {\r\n\r\n                    for (let j = actualDate.length; j >= 0; j -= 2) {\r\n                        actualDate.splice(j, 1);\r\n                    }\r\n                    if (actualDate.length > 6) {\r\n                        check();\r\n\r\n                    }\r\n                }\r\n\r\n                function drawText() {\r\n\r\n                    ctx.beginPath();\r\n                    let  x =0;\r\n                    for(let i = 0;i < date.length; i++)\r\n                    {\r\n                        if(date[i]){\r\n                            if(actualDate.indexOf(date[i])!==-1) {\r\n                                ctx.fillText(date[i], x-20, 20);\r\n                            }\r\n                        }\r\n                        x+=step;\r\n                    }\r\n                    ctx.stroke();\r\n                }\r\n            },\r\n\r\n            drawYmeter(ctx){\r\n              //  console.log('я рисую Y метрики');\r\n                ctx.fillText('0', 5, -5);\r\n                ctx.beginPath();\r\n                for(let i =0 ; i < this.countLine+1 ; i++){\r\n                    ctx.moveTo(0,-this.shiftY*i);\r\n                    ctx.lineTo(this.prevWidth ,-this.shiftY*i);\r\n                    ctx.fillText(this.metricValue*i, 5, -this.shiftY*i-5);\r\n                }\r\n                ctx.stroke();\r\n\r\n            },\r\n            setPreviewCoord(){\r\n\r\n                let ratioPreview  = this.getPreviewRatio(); //Достаточно обновлять только при инициалиции и переключении графиков\r\n                this.previewCoord=[];\r\n                let yCoord = [];\r\n                for(let i = 1; i < this.columns.length;i++ ) {\r\n                    let yArray  = this.columns[i];\r\n\r\n                    if(this.activGraph.indexOf(yArray[0])=== -1){\r\n                        continue;\r\n                    }\r\n                    for(let j = 1 ; j < yArray.length; j++ ) {\r\n                        yCoord.push(-yArray[j]/ratioPreview);           //Переводим в отрицательную плоскость canvas\r\n                    }\r\n\r\n                    this.previewCoord.push(yCoord);\r\n                    yCoord = [];\r\n                }\r\n            },\r\n            drawPreviewGraphs(ctxPreview){\r\n\r\n             //   console.log('я рисую превью графики');\r\n                for(let i = 0; i < this.previewCoord.length;i++ ) {\r\n                    let tempArray =  this.previewCoord[i];\r\n                    let color =   this.colors[this.activGraph[i]];\r\n\r\n                    this.drawGraph(tempArray,ctxPreview,color,this.xStep);\r\n                }\r\n            },\r\n\r\n            drawMainGraphs(ctxMain){\r\n           //     console.log('я рисую главный график');\r\n\r\n                let yCoord = [];\r\n                for(let i = 1; i < this.mainData.length;i++ ) {\r\n                    let yArray  = this.mainData[i];\r\n                    for(let i = 0 ; i < yArray.length;i++ ) {\r\n                        yCoord.push(-yArray[i]/this.ratioMain);           //Переводим в отрицательную плоскость canvas\r\n                    }\r\n                    let color =   this.colors[this.activGraph[i-1]];\r\n                    this.drawGraph(yCoord,ctxMain,color,this.step);\r\n                    yCoord = [];\r\n                }\r\n            },\r\n\r\n            draw(){\r\n                let ctxMain =this.ctxMain;\r\n                let ctxPreview = this.ctxPreview;\r\n\r\n                //очищаем холст\r\n\r\n                ctxPreview.clearRect(0, -this.prevHeight-(this.prevShift/2), this.prevWidth, this.prevCanvasHeight);\r\n                ctxMain.clearRect(0, -this.mainHeight-(this.mainShift/2), this.prevWidth, this.mainCanvasHeight);\r\n\r\n                // Сначала заполнаем массив данных от start До end\r\n                this.setCurrentMainData();\r\n\r\n                // Вычисляем шаги и отношения\r\n                this.setMainRatio();\r\n                // Метрики главного графика\r\n\r\n                this.drawMetrics(ctxMain);\r\n                // Все графики\r\n\r\n                //Коробка предпросмотра\r\n                this.drawBox(ctxPreview);\r\n                ctxPreview.lineWidth =2;  // восстановили значение\r\n\r\n                this.drawPreviewGraphs(ctxPreview);\r\n                this.drawMainGraphs(ctxMain);\r\n\r\n                // Затенение оставшейся части предпросмотра\r\n                this.drawFillBox(ctxPreview);\r\n\r\n\r\n            },\r\n            defaultDraw(){\r\n                let ctxMain =this.ctxMain;\r\n                let ctxPreview = this.ctxPreview;\r\n\r\n                //очищаем холст\r\n                ctxPreview.clearRect(0, -this.prevHeight-(this.prevShift/2), this.prevWidth, this.prevCanvasHeight);\r\n                ctxMain.clearRect(0, -this.mainHeight-(this.mainShift/2), this.prevWidth, this.mainCanvasHeight);\r\n\r\n                ctxPreview.fillStyle = this.timeColor.gLine;\r\n                ctxMain.fillStyle = this.timeColor.gLine;\r\n\r\n                ctxPreview.fillRect(0, -this.prevHeight-(this.prevShift/2), this.prevWidth, this.prevCanvasHeight);\r\n                ctxMain.fillRect(0, -this.mainHeight-(this.mainShift/2), this.prevWidth, this.mainCanvasHeight);\r\n\r\n\r\n                ctxMain.strokeStyle ='#000';\r\n                ctxMain.fillText('0', 5, -5);\r\n\r\n\r\n                ctxMain.beginPath();\r\n                for(let i =0 ; i < this.countLine+1 ; i++){\r\n                    ctxMain.moveTo(0,-this.shiftY*i);\r\n                    ctxMain.lineTo(this.prevWidth ,-this.shiftY*i);\r\n\r\n                }\r\n                ctxMain.stroke();\r\n\r\n            },\r\n            init(){\r\n\r\n                let canvasPreview = this.$refs.preview;\r\n                this.ctxPreview = canvasPreview.getContext('2d');\r\n                let canvasMain = this.$refs.main;\r\n                this.ctxMain = canvasMain.getContext('2d');\r\n                let canvasBoard = this.$refs.board;\r\n                this.ctxBoard = canvasBoard.getContext('2d');\r\n\r\n\r\n                this.colors = this.chart.colors;\r\n                this.names = this.chart.names;\r\n                this.types = this.chart.types;\r\n                this.columns =  this.chart.columns;\r\n\r\n                //Воостанавливаем чистые настройки контекстов\r\n                this.ctxPreview.restore();\r\n                this.ctxMain.restore();\r\n                this.ctxBoard.restore();\r\n                // а затем сохраняем чистые\r\n                this.ctxPreview.save();\r\n                this.ctxMain.save();\r\n                this.ctxBoard.save();\r\n\r\n                let chiftM = this.mainHeight+(this.mainShift/2);\r\n                let chiftP = this.prevHeight+(this.prevShift/2);\r\n\r\n                console.log('this.mainHeight',this.mainHeight);\r\n                console.log('this.prevHeight',this.prevHeight);\r\n                console.log('this.mainCanvasHeight',this.mainCanvasHeight);\r\n                console.log('this.prevCanvasHeight',this.prevCanvasHeight);\r\n                console.log('chiftM',chiftM);\r\n                console.log('chiftP',chiftP);\r\n\r\n                //переводим сисмему координат на низ холста\r\n                this.ctxPreview.translate(0,chiftP); //сдвиг по высоте\r\n                this.ctxMain.translate(0,chiftM);   // На графике ниже нулевой линии положительная плоскость Y холста\r\n                this.ctxBoard.translate(0,chiftM);\r\n                //Ставлю коробку на место возможно временно\r\n                // this.boxXcoord =  800;\r\n                // this.boxWidth = 280;\r\n\r\n\r\n                this.activGraph = Object.keys(this.colors);\r\n             //   console.log(' this.activGraph', this.activGraph);\r\n                // инициализируем смещение от левого края холста\r\n                let coords    = this.getCoords(canvasPreview);\r\n                this.xOffset = coords.left;\r\n                // console.log('this.xOffset',this.xOffset);\r\n\r\n                // Ставим линии пошире и рисуем\r\n                this.ctxMain.lineWidth = 2;\r\n                this.ctxPreview.lineWidth = 2;\r\n                // Заполняем массив превью коорд\r\n                // что бы потом его не персчитывать при перерисовке\r\n                // а только при смене графиков\r\n                this.boxXcoord=0;\r\n                this.boxWidth=280;\r\n\r\n                this.setDateArray();\r\n                this.setPreviewCoord();\r\n\r\n\r\n                this.draw();\r\n\r\n            }\r\n        },\r\n        created(){\r\n            console.log('mounted');\r\n        },\r\n        mounted(){\r\n            this.init();\r\n            console.log('mounted');\r\n        },\r\n\r\n        name: \"ChartCanvas\"\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n    .checkbox{\r\n        list-style: none;\r\n        padding: 5px;\r\n    }\r\n    .checkbox__li{\r\n        display: inline-block;\r\n        position: relative;\r\n        margin-left: 1rem;\r\n    }\r\n\r\n    .checkbox__input {\r\n        display: none;\r\n    }\r\n    .checkbox__text {\r\n        display: inline-block;\r\n        position: relative;\r\n        padding: 0.8rem 0.8rem 0.8rem 3rem;\r\n        border-radius: 2rem;\r\n        border: 1px solid lightgray;\r\n    }\r\n\r\n    .checkbox__button {\r\n        position: absolute;\r\n        top: 0.6rem;\r\n        left: 0.6rem;\r\n        width: 0.1rem;\r\n        height: 0.1rem;\r\n        border: 0.8rem solid black;\r\n        border-radius: 1rem;\r\n        box-shadow: 0 2px 5px rgba(0,0,0,.3);\r\n        transition: .3s;\r\n    }\r\n    .checkbox__i {\r\n        position: absolute;\r\n        font-size: 1.1rem;\r\n        color: white;\r\n        top: 0.7rem;\r\n        left: 0.8rem;\r\n\r\n    }\r\n    .checkbox__input:checked  ~ .checkbox__button{\r\n        top: 0.6rem;\r\n        left: 0.6rem;\r\n        width: 1.5rem;\r\n        height: 1.5rem;\r\n        border: 2px solid black;\r\n    }\r\n    /*Для ночного режима*/\r\n    .checkbox__input:checked  ~ .checkbox__i{\r\n        font-size: 0;\r\n    }\r\n\r\n\r\n\r\n    .save{\r\n        text-align: center;\r\n        color: #36a8f1 ;\r\n        font: bold italic 1.5rem sans-serif;\r\n        cursor: pointer;\r\n        margin-left: 2%;\r\n        text-decoration: none;\r\n    }\r\n\r\n\r\n\r\n    .stage {\r\n        /*width: 1080px;*/\r\n        /*height: 700px;*/\r\n        position: relative;\r\n\r\n    }\r\n\r\n    .stage canvas { position: absolute; }\r\n    .stage :first-child  { z-index: 2; }\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ChartCanvas.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ChartCanvas.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ChartCanvas.vue?vue&type=template&id=188ad938&scoped=true&\"\nimport script from \"./ChartCanvas.vue?vue&type=script&lang=js&\"\nexport * from \"./ChartCanvas.vue?vue&type=script&lang=js&\"\nimport style0 from \"./ChartCanvas.vue?vue&type=style&index=0&id=188ad938&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"188ad938\",\n  null\n  \n)\n\nexport default component.exports","<template>\n  <div id=\"app\" >\n\n    <div class=\"night-mode\">\n    <p v-if=\"isNight\"   @click=\"isNight=!isNight\">Switch to Day Mode </p>\n    <p v-else    @click=\"isNight=!isNight\">Switch to Night Mode </p>\n    </div>\n\n    <ul class=\"select-chart\">\n      <li v-for=\"(chart,index) in charts\"   :key=\"index\" >\n        <p  class=\"number\">Chart№{{index+1}}</p>\n        <chart-canvas\n                :chart = chart\n                :isNight = isNight\n                :hWindow  = hWindow\n                :wWindow  = wWindow\n        ></chart-canvas>\n\n      </li>\n\n    </ul>\n\n</div>\n\n</template>\n\n<script>\nimport ChartCanvas from './components/ChartCanvas.vue'\n\nexport default {\n  data: function () {\n    return{\n      charts:[],\n      isNight: false,  // флаг для перехода в ночной режим и обратно\n      hWindow:null,\n      wWindow:null\n     }\n  },\n  methods: {\n    onResize() {\n       this.hWindow = document.documentElement.clientHeight;\n       this.wWindow = document.documentElement.clientWidth;\n    }\n  },\n  created(){\n    this.hWindow = document.documentElement.clientHeight;\n    this.wWindow = document.documentElement.clientWidth;\n  },\n\n  mounted () {\n    //Работает в IE 11\n    let self =this;\n\n    window.addEventListener('resize', this.onResize);\n\n    function loadJSON(callback) {\n      var xobj = new XMLHttpRequest();\n      xobj.overrideMimeType(\"application/json\");\n      xobj.open('GET', 'chart_data.json', true); // Replace 'my_data' with the path to your file\n      xobj.onreadystatechange = function () {\n        if (xobj.readyState == 4 && xobj.status == \"200\") {\n          // Required use of an anonymous callback as .open will NOT return a value but simply returns undefined in asynchronous mode\n          callback(xobj.responseText);\n        }\n      };\n      xobj.send(null);\n    }\n\n      // fetch('chart_data.json')\n      //         .then(response => response.json() )\n      //         .then(data=>  this.charts = data )\n      //         .catch( alert );\n\n\n\n      loadJSON(function(response) {\n        // Parse JSON string into object\n        self.charts = JSON.parse(response);\n\n      });\n\n\n  },\n\n  beforeDestroy() {\n    // Unregister the event listener before destroying this Vue instance\n    window.removeEventListener('resize', this.onResize);\n  },\n  name: 'app',\n  components: {\n    ChartCanvas\n  }\n}\n</script>\n\n<style scoped>\n\n\n .select-chart{\n   list-style: none;\n\n  }\n .night-mode{\n\n   text-align: center;\n   color: #36a8f1 ;\n   font: bold italic 2.5rem sans-serif;\n   cursor: pointer;\n }\n\n .number{\n   color: #36a8f1 ;\n   font: bold italic 1.5rem sans-serif;\n   margin-left: 2%;\n\n }\n\n</style>\n","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=9a054fec&scoped=true&\"\nimport script from \"./App.vue?vue&type=script&lang=js&\"\nexport * from \"./App.vue?vue&type=script&lang=js&\"\nimport style0 from \"./App.vue?vue&type=style&index=0&id=9a054fec&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"9a054fec\",\n  null\n  \n)\n\nexport default component.exports","import Vue from 'vue'\nimport App from './App.vue'\n\nVue.config.productionTip = false\n\nnew Vue({\n  render: h => h(App),\n}).$mount('#app')\n","import mod from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ChartCanvas.vue?vue&type=style&index=0&id=188ad938&scoped=true&lang=css&\"; export default mod; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ChartCanvas.vue?vue&type=style&index=0&id=188ad938&scoped=true&lang=css&\"","import mod from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&id=9a054fec&scoped=true&lang=css&\"; export default mod; export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&id=9a054fec&scoped=true&lang=css&\""],"sourceRoot":""}